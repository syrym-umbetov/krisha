// app/api/parse-krisha/route.ts
import { NextRequest, NextResponse } from 'next/server';
import * as cheerio from 'cheerio';

interface ApartmentData {
  title: string;
  price: string;
  pricePerMeter: string;
  city: string;
  district: string;
  buildingType: string;
  complex: string;
  yearBuilt: string;
  area: string;
  rooms: string;
  floor: string;
  ceilingHeight: string;
  description: string;
  features: string[];
  location: string;
  infrastructure: string[];
  architecture: string[];
  landscaping: string;
  marketPrice: {
    thisListing: string;
    similarInAstana: string;
    similarInCity?: string;
    percentageDifference: string;
  };
  contact?: {
    name: string;
    type: string;
    phone: string;
  };
  views?: string;
  images: string[];
  imageVariants?: {
    thumb: string;
    medium: string;
    large: string;
    full: string;
  };
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UUID
function extractUuidFromUrl(url: string): string | null {
  const match = url.match(/\/([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})\//i);
  return match ? match[1] : null;
}

function extractPrefixFromUrl(url: string): string | null {
  const match = url.match(/\/webp\/([^\/]+)\//);
  return match ? match[1] : null;
}

function convertImageUrl(url: string, size: 'thumb' | 'medium' | 'large' | 'full' = 'full'): string {
  if (!url || !url.includes('alaps-photos-kr.kcdn.kz')) {
    return url;
  }

  const sizeMap = {
    'thumb': '120x90',     
    'medium': '280x175',   
    'large': '750x470',    
    'full': 'full'         
  };

  return url.replace(/-\d+x\d+\.(webp|jpg|jpeg)/, `-${sizeMap[size]}.$1`);
}

function generateImageUrl(prefix: string, uuid: string, imageNumber: number, size: string = 'full'): string {
  return `https://alaps-photos-kr.kcdn.kz/webp/${prefix}/${uuid}/${imageNumber}-${size}.webp`;
}

function parseImages($: cheerio.CheerioAPI): string[] {
    const images: string[] = [];
    const imageNumbers = new Set<number>();
  
    console.log('üñºÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UUID...');
  
    // –û–¢–õ–ê–î–ö–ê HEAD –≠–õ–ï–ú–ï–ù–¢–ê
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ HEAD:');
    console.log('  - –ù–∞–π–¥–µ–Ω–æ head —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', $('head').length);
    console.log('  - –í—Å–µ–≥–æ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤:', $('meta').length);
    console.log('  - –ú–µ—Ç–∞-—Ç–µ–≥–∏ –≤ head:', $('head meta').length);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞ og:image
    const ogImageProperty = $('meta[property="og:image"]').attr('content');
    const ogImageName = $('meta[name="og:image"]').attr('content');
    const ogImageInHead = $('head meta[property="og:image"]').attr('content');
    
    console.log('üì∏ og:image (property):', ogImageProperty || '–ù–ï –ù–ê–ô–î–ï–ù');
    console.log('üì∏ og:image (name):', ogImageName || '–ù–ï –ù–ê–ô–î–ï–ù');
    console.log('üì∏ og:image –≤ head:', ogImageInHead || '–ù–ï –ù–ê–ô–î–ï–ù');
  
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π –º–µ—Ç–∞-—Ç–µ–≥ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–∑ alaps-photos-kr.kcdn.kz
    let foundImageUrl = null;
    $('meta').each((i, element) => {
      const content = $(element).attr('content');
      if (content && content.includes('alaps-photos-kr.kcdn.kz')) {
        const property = $(element).attr('property') || $(element).attr('name');
        console.log(`üì∏ –ù–∞–π–¥–µ–Ω –º–µ—Ç–∞-—Ç–µ–≥ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: ${property} = ${content}`);
        if (!foundImageUrl) foundImageUrl = content;
      }
    });
  
    // –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –≤ title –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
    const title = $('title').text();
    console.log('üìÑ Title —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', title);
  
    // –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–∞–º–æ–º HTML (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –º–µ—Ç–∞-—Ç–µ–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
    console.log('üîç –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä—è–º–æ –≤ HTML:');
    const directImages = [];
    $('img').each((i, element) => {
      const src = $(element).attr('src') || $(element).attr('data-src');
      if (src && src.includes('alaps-photos-kr.kcdn.kz')) {
        directImages.push(src);
      }
    });
    console.log(`  - –ù–∞–π–¥–µ–Ω–æ img —Ç–µ–≥–æ–≤ —Å alaps-photos: ${directImages.length}`);
    if (directImages.length > 0) {
      console.log(`  - –ü–µ—Ä–≤—ã–µ 3: ${directImages.slice(0, 3)}`);
    }
  
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π URL (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: og:image, –ø–æ—Ç–æ–º –ª—é–±–æ–π –¥—Ä—É–≥–æ–π)
    const ogImageUrl = ogImageProperty || ogImageName || ogImageInHead || foundImageUrl;
  
    
    if (!ogImageUrl) {
      console.log('og:image –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞');
      return parseImagesOldMethod($);
    }
  
    console.log('–ù–∞–π–¥–µ–Ω og:image:', ogImageUrl);
  
    const uuid = extractUuidFromUrl(ogImageUrl);
    const prefix = extractPrefixFromUrl(ogImageUrl);
  
    if (!uuid || !prefix) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å UUID –∏–ª–∏ prefix –∏–∑ og:image, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥');
      return parseImagesOldMethod($);
    }
  
    console.log('–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { uuid, prefix });
  
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ –∏–∑ HTML
    const selectors = [
      '.gallery__small-item img',
      '.gallery__main img', 
      '.gallery__small-item',
      'picture source',
      '[data-photo-url]'
    ];
  
    selectors.forEach(selector => {
      $(selector).each((i, element) => {
        let src = $(element).attr('src') || 
                  $(element).attr('data-src') || 
                  $(element).attr('data-photo-url');
        
        if (!src && $(element).attr('srcset')) {
          const srcset = $(element).attr('srcset') || '';
          src = srcset.split(',')[0].trim().split(' ')[0];
        }
  
        if (src && src.includes(uuid)) {
          const numberMatch = src.match(/\/(\d+)-/);
          if (numberMatch) {
            const imageNumber = parseInt(numberMatch[1]);
            imageNumbers.add(imageNumber);
            console.log(`–ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageNumber}`);
          }
        }
      });
    });
  
    // –ò–ó–ú–ï–ù–ï–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—É–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (imageNumbers.size === 0) {
      console.log('–ù–æ–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ HTML, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ 1-15');
      for (let i = 1; i <= 15; i++) {
        imageNumbers.add(i);
      }
    }
  
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL
    const sortedNumbers = Array.from(imageNumbers).sort((a, b) => a - b);
    
    for (const imageNumber of sortedNumbers) {
      const fullUrl = generateImageUrl(prefix, uuid, imageNumber, 'full');
      images.push(fullUrl);
    }
  
    console.log(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${images.length} URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è UUID: ${uuid}`);
    
    return images;
  }
// –ó–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–µ—Å–ª–∏ UUID –Ω–µ –Ω–∞–π–¥–µ–Ω)
function parseImagesOldMethod($: cheerio.CheerioAPI): string[] {
  const images: string[] = [];
  const imageUrls = new Set<string>();

  console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');

  const selectors = ['.gallery__small-item img', '.gallery__main img', 'picture source'];

  selectors.forEach(selector => {
    $(selector).each((i, element) => {
      let src = $(element).attr('src') || $(element).attr('data-src');
      
      if (!src && $(element).attr('srcset')) {
        const srcset = $(element).attr('srcset') || '';
        src = srcset.split(',')[0].trim().split(' ')[0];
      }

      if (src && src.includes('alaps-photos-kr.kcdn.kz')) {
        const fullSrc = src.startsWith('http') ? src : `https:${src}`;
        imageUrls.add(fullSrc);
      }
    });
  });

  $('.gallery__small-item[data-photo-url]').each((i, element) => {
    const photoUrl = $(element).attr('data-photo-url');
    if (photoUrl && photoUrl.includes('alaps-photos-kr.kcdn.kz')) {
      const fullSrc = photoUrl.startsWith('http') ? photoUrl : `https:${photoUrl}`;
      imageUrls.add(fullSrc);
    }
  });

  Array.from(imageUrls).forEach(url => {
    const fullUrl = convertImageUrl(url, 'full');
    if (!images.includes(fullUrl)) {
      images.push(fullUrl);
    }
  });

  return images.sort((a, b) => {
    const numA = extractImageNumber(a);
    const numB = extractImageNumber(b);
    return numA - numB;
  });
}

function extractImageNumber(url: string): number {
  const match = url.match(/\/(\d+)-/);
  return match ? parseInt(match[1]) : 999;
}

export async function POST(request: NextRequest) {
  try {
    const { url } = await request.json();

    if (!url || !url.includes('krisha.kz')) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ krisha.kz' },
        { status: 400 }
      );
    }

    console.log(`–ü–∞—Ä—Å–∏–Ω–≥ URL: ${url}`);

    const headers = {
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
      'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
      'Accept-Encoding': 'gzip, deflate, br',
      'Connection': 'keep-alive',
      'Upgrade-Insecure-Requests': '1',
    };

    const response = await fetch(url, { headers });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const html = await response.text();
    const $ = cheerio.load(html);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
    const apartmentData: ApartmentData = {
      title: '',
      price: '',
      pricePerMeter: '',
      city: '',
      district: '',
      buildingType: '',
      complex: '',
      yearBuilt: '',
      area: '',
      rooms: '',
      floor: '',
      ceilingHeight: '',
      description: '',
      features: [],
      location: '',
      infrastructure: [],
      architecture: [],
      landscaping: '',
      images: [], // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º
      marketPrice: {
        thisListing: '',
        similarInAstana: '',
        percentageDifference: ''
      }
    };

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    apartmentData.title = $('.offer__advert-title h1').text().trim() || 
                          $('.offer__advert-title').text().trim();

    // –¶–µ–Ω–∞
    apartmentData.price = $('.offer__price').text().replace(/\s+/g, ' ').trim();

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏ —Ä–∞–π–æ–Ω –∏–∑ –ª–æ–∫–∞—Ü–∏–∏
    $('.offer__info-item').each((i, element) => {
      const title = $(element).find('.offer__info-title').text().trim().toLowerCase();
      const value = $(element).find('.offer__advert-short-info').text().trim();

      if (title.includes('–≥–æ—Ä–æ–¥')) {
        if (value.includes(',')) {
          const parts = value.split(',');
          apartmentData.city = parts[0].trim();
          apartmentData.district = parts[1].trim();
        } else {
          apartmentData.city = value;
        }
      } else if (title.includes('–∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å')) {
        apartmentData.complex = $(element).find('.offer__advert-short-info a').text().trim() || value;
      } else if (title.includes('–≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏')) {
        apartmentData.yearBuilt = value;
      } else if (title.includes('—ç—Ç–∞–∂')) {
        apartmentData.floor = value;
      } else if (title.includes('–ø–ª–æ—â–∞–¥—å')) {
        apartmentData.area = value;
      } else if (title.includes('–±–∞–ª–∫–æ–Ω')) {
        apartmentData.features.push(`–ë–∞–ª–∫–æ–Ω: ${value}`);
      }
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    $('.offer__parameters dl').each((i, element) => {
      const key = $(element).find('dt').text().trim();
      const value = $(element).find('dd').text().trim();

      if (key.includes('–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤')) {
        apartmentData.ceilingHeight = value;
      } else if (key.includes('–ë–∞–ª–∫–æ–Ω –æ—Å—Ç–µ–∫–ª—ë–Ω')) {
        apartmentData.features.push(`–ë–∞–ª–∫–æ–Ω –æ—Å—Ç–µ–∫–ª—ë–Ω: ${value}`);
      } else if (key.includes('–î–≤–µ—Ä—å')) {
        apartmentData.features.push(`–î–≤–µ—Ä—å: ${value}`);
      } else if (key.includes('–ò–Ω—Ç–µ—Ä–Ω–µ—Ç')) {
        apartmentData.features.push(`–ò–Ω—Ç–µ—Ä–Ω–µ—Ç: ${value}`);
      } else if (key.includes('–ü–∞—Ä–∫–æ–≤–∫–∞')) {
        apartmentData.features.push(`–ü–∞—Ä–∫–æ–≤–∫–∞: ${value}`);
      } else if (key.includes('–ö–≤–∞—Ä—Ç–∏—Ä–∞ –º–µ–±–ª–∏—Ä–æ–≤–∞–Ω–∞')) {
        apartmentData.features.push(`–ú–µ–±–ª–∏—Ä–æ–≤–∞–Ω–∞: ${value}`);
      } else if (key.includes('–ü–æ–ª')) {
        apartmentData.features.push(`–ü–æ–ª: ${value}`);
      } else if (key.includes('–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å')) {
        apartmentData.features.push(`–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: ${value}`);
      }
    });

    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const titleMatch = apartmentData.title.match(/(\d+)-–∫–æ–º–Ω–∞—Ç–Ω–∞—è/);
    if (titleMatch) {
      apartmentData.rooms = `${titleMatch[1]} –∫–æ–º–Ω–∞—Ç—ã`;
    }

    // –ü–ª–æ—â–∞–¥—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    if (!apartmentData.area) {
      const areaMatch = apartmentData.title.match(/(\d+(?:\.\d+)?)\s*–º¬≤/);
      if (areaMatch) {
        apartmentData.area = `${areaMatch[1]} –º¬≤`;
      }
    }

    // –û–ø–∏—Å–∞–Ω–∏–µ
    apartmentData.description = $('.js-description').text().trim() || 
                               $('.offer__description .text').text().trim();

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏
    $('.paid-labels__item').each((i, element) => {
      const label = $(element).text().trim();
      if (label) {
        apartmentData.features.push(label);
      }
    });

    // –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø - –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó!
    apartmentData.images = parseImages($);

    // –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞)
    if (apartmentData.images.length > 0) {
      apartmentData.imageVariants = {
        thumb: convertImageUrl(apartmentData.images[0], 'thumb'),
        medium: convertImageUrl(apartmentData.images[0], 'medium'),
        large: convertImageUrl(apartmentData.images[0], 'large'),
        full: convertImageUrl(apartmentData.images[0], 'full')
      };
    }

    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ü–µ–Ω
    apartmentData.marketPrice = {
      thisListing: $('.green-price').first().text().trim(),
      similarInAstana: $('.blue-price').first().text().trim() || $('.white-blue-price').first().text().trim(),
      percentageDifference: $('.a-analytics .text').text().trim()
    };

    // –¶–µ–Ω–∞ –∑–∞ –º¬≤
    apartmentData.pricePerMeter = apartmentData.marketPrice.thisListing;

    // –ö–æ–Ω—Ç–∞–∫—Ç—ã
    const contactName = $('.owners__name').text().trim();
    const contactType = $('.label-user-agent').text().trim();
    const contactPhone = $('.a-phones .phone').text().trim();
    
    if (contactName || contactType) {
      apartmentData.contact = {
        name: contactName,
        type: contactType,
        phone: contactPhone
      };
    }

    // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
    const viewsText = $('#a-nb-views strong').text().trim();
    if (viewsText) {
      apartmentData.views = viewsText;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!apartmentData.title && !apartmentData.price) {
      return NextResponse.json(
        { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.' },
        { status: 422 }
      );
    }

    // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    Object.keys(apartmentData).forEach(key => {
      if (typeof (apartmentData as any)[key] === 'string') {
        (apartmentData as any)[key] = (apartmentData as any)[key].replace(/\s+/g, ' ').trim();
      }
    });

    console.log('–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ:', {
      title: apartmentData.title,
      price: apartmentData.price,
      city: apartmentData.city,
      images: apartmentData.images.length,
      features: apartmentData.features.length
    });

    return NextResponse.json({ data: apartmentData });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
    
    return NextResponse.json(
      { 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}

// GET –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export async function GET() {
  return NextResponse.json({
    message: 'Krisha.kz Parser API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ',
    usage: 'POST /api/parse-krisha with { url: "https://krisha.kz/..." }',
    version: '1.0.0'
  });
}
